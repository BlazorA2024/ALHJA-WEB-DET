
 @page "/settings/{*url}"
@inherits ComponentBase
@inject NavigationManager NavigationManager
 @using BlazorASG.Components.SidebarMen.Settings
 

<ResendConfirmationemail />
<div class="container relative flex flex-col md:grid md:space-y-0 w-full md:grid-cols-12 space-y-4 md:gap-6 py-6" style=" margin-right: 15%;">
    <div class="md:col-span-4 lg:col-span-3">
        <section class="pt-6 border-gray-100 from-gray-50-to-white overflow-hidden rounded-xl border border-gray-100 bg-gradient-to-l">
            <a class="cols-span-9 mb-2 flex items-center px-4 pb-4" href="/735408478mm">
                <div class="relative flex-none">
                    <img alt="" class="rounded-full mr-3 size-12 flex-none overflow-hidden bg-gray-100 dark:bg-gray-900"
                         src="https://cdn-avatars.huggingface.co/v1/production/uploads/noauth/SXJTVYmE71adfaZsiGDsE.png">
                </div>

                <div class="my-1">
                    <h2 class="flex items-center text-lg/5 font-bold lg:text-xl/6">عبدالرحمن</h2>
                    <div class="inline-block rounded bg-gray-200 px-1 font-mono text-xs dark:bg-gray-800">735408478mm</div>
                </div>
            </a>
            <nav>
                <ul class="divide-y divide-gray-100 border-t border-gray-100 text-base text-gray-600">
                    @foreach (var item in NavItems)
                    {
                        <li>
                            <a href="@item.url" class="group relative flex items-center overflow-hidden px-2 py-1.5 dark:text-gray-400">
                                <div class="block rounded px-2 py-0.5 group-hover:bg-gray-100 dark:group-hover:bg-gray-800">@item.Label</div>
                                @if (!string.IsNullOrEmpty(item.Badge))
                                {
                                    <span class="ml-auto mr-1.5 rounded px-1.5 py-0.5 text-xs font-semibold leading-tight bg-blue-500/10 text-blue-700 dark:text-blue-200">@item.Badge</span>
                                }

                            </a>
                        </li>
                    }
                </ul>
            </nav>
        </section>

        <div slot="footer" class="mt-3 flex items-center gap-2 text-sm text-gray-400 lg:px-4">
            Upgrade to
            <a class="flex items-center border-b hover:border-gray-600 hover:text-gray-600 dark:border-gray-600 dark:hover:border-gray-200 dark:hover:text-gray-200" href="/settings/billing/subscription#subscribe">
                <svg class="mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" aria-hidden="true" focusable="false" role="img" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 12 12"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.198 1.961a3.164 3.164 0 0 1 1.711-.616h5.455c1.163 0 1.818.946 1.454 2.073l-1.672 5.164c-.364 1.127-1.637 2.072-2.837 2.072H1.855C.69 10.654 0 9.71.364 8.582l1.745-5.164A3.164 3.164 0 0 1 3.2 1.96Zm1.807 1.705L3.387 8.364h1.315l.513-1.49h.535c.346 0 .69-.057 1.03-.173.346-.115.652-.293.918-.534a2.2 2.2 0 0 0 .606-.94c.136-.395.15-.706.039-.932-.106-.227-.295-.388-.567-.484a2.853 2.853 0 0 0-.952-.145h-1.82Zm1.022 2.226h-.474l.428-1.243h.443c.255 0 .436.043.544.13.108.087.125.236.052.448a.977.977 0 0 1-.36.492c-.162.115-.373.173-.612.173Z" fill="currentColor"></path></svg> Pro
            </a>
        </div>
    </div>

        @if (!string.IsNullOrEmpty(url))
    {
        <RenderFragment class="md:col-span-8 lg:col-span-9">
                

            @RenderComponentBasedOnUrl
       
        </RenderFragment>
    }
    else
    {
        <BillingSection />
    }
   
</div>
<style>


    .tab-alternate.active {
        --tw-border-opacity: 1;
        border-color: rgb(55 65 81 / var(--tw-border-opacity));
        font-weight: 600;
        --tw-text-opacity: 1;
        color: rgb(31 41 55 / var(--tw-text-opacity));
    }

    .tab-alternate {
        display: flex;
        height: 100%;
        align-items: center;
        white-space: nowrap;
        border-bottom-width: 2px;
        border-color: transparent;
        padding-left: .625rem;
        padding-right: .625rem;
        font-weight: 500;
        --tw-text-opacity: 1;
        color: rgb(75 85 99 / var(--tw-text-opacity));
    }

    a {
        color: inherit;
        text-decoration: inherit;
    }

    .tab-alternate {
        display: flex;
        height: 100%;
        align-items: center;
        white-space: nowrap;
        border-bottom-width: 2px;
        border-color: transparent;
        padding-left: .625rem;
        padding-right: .625rem;
        font-weight: 500;
        --tw-text-opacity: 1;
        color: rgb(75 85 99 / var(--tw-text-opacity));
    }
    /* التأثير عند التمرير */
    button.group:hover {
        background-color: #f3f4f6; /* تغيير الخلفية */
        border-color: #d1d5db; /* تغيير الإطار */
        color: #1f2937; /* لون نص مختلف */
    }

    /* الجزء الداخلي للزر */
    button.group div {
        /*             border-radius: 6px; /* زوايا مخصصة للنص */
        transition: background-color 0.3s ease; /* تأثير تغيير الخلفية */
    }

    /* التأثير عند التمرير فوق الجزء الداخلي */
    button.group:hover div {
        background-color: #e5e7eb; /* خلفية عند التمرير */
    }

    /* شارة (Badge) مميزة */


    /* التأثير على الشارة عند التمرير */
    button.group:hover span {
        background-color: #bfdbfe; /* لون الخلفية عند التمرير */
        color: #1e3a8a; /* لون النص */
    }

    /* تصميم الوضع المظلم */
    button.group.dark {
        background-color: #1f2937;
        color: #d1d5db;
        border-color: #374151;
    }

        button.group.dark:hover {
            background-color: #111827;
            border-color: #4b5563;
            color: #ffffff;
        }

        button.group.dark div {
            background-color: transparent;
        }

        button.group.dark:hover div {
            background-color: #374151;
        }

        button.group.dark span {
            background-color: #334155;
            color: #93c5fd;
        }

        button.group.dark:hover span {
            background-color: #1e293b;
            color: #bfdbfe;
        }

    
</style>
@code {
    private List<NavItem> NavItems = new()
    {
        new NavItem { Label = "Profile", url = "settings/profile" },
        new NavItem { Label = "Account", url = "settings/Account" },
        new NavItem { Label = "Authentication", url = "settings/authentication" },
        new NavItem { Label = "Organizations", url = "settings/organizations" },
        new NavItem { Label = "Billing", url = "settings/billing" },
        new NavItem { Label = "Access Tokens", url = "settings/AccessTokens" },
        new NavItem { Label = "SSH and GPG Keys", url = "settings/keys" },
        new NavItem { Label = "Webhooks", url = "settings/webhooks" },
        new NavItem { Label = "Papers", url = "settings/papers" },
        new NavItem { Label = "Notifications", url = "settings/notifications" },
        new NavItem { Label = "Local Apps and ", url = "settings/local-apps", Badge = "NEW" },
        new NavItem { Label = "Gated Repositories", url = "settings/gated-repos" },
        new NavItem { Label = "Content Preferences", url = "settings/content-preferences" },
        new NavItem { Label = "Connected Apps", url = "settings/applications" },
        new NavItem { Label = "Theme", url = "settings/theme" }
    };

    [Parameter] public string url { get; set; }  // هذه الخاصية تعتمد على المسار الديناميكي

    private RenderFragment RenderComponentBasedOnUrl => builder =>
    {
    if (builder == null)
    {
        throw new ArgumentNullException(nameof(builder));
    }

    // قائمة المكونات المرتبطة بكل URL
    var componentMap = new Dictionary<string, Type>
        {
        { "profile", typeof(SidebarMenu) },
        { "Account", typeof(AccountTemplate) },
        { "authentication", typeof(AuthenticationTemplate) },
        { "organizations", typeof(OrganizationsTemplate) },
        { "billing", typeof(BillingSection) },
        { "AccessTokens", typeof(AccessTokensTemplate) },
        { "keys", typeof(SSHandGPGKeysTemplate) },
        { "keys/addtype=ssh", typeof(KeysAddaSSHkey) },
        { "keys/addtype=pgp", typeof(Keysaddapgpp) },
        { "webhooks", typeof(WebhooksTemplate) },
                { "webhooks/new", typeof(Newwebhook) },

        { "papers", typeof(PapersTemplate) },
        { "notifications", typeof(NotificationsTemplate) },
        { "local-apps", typeof(LocalAppsTemplate) },
        { "gated-repos", typeof(GatedRepositoriesTemplate) },
        { "content-preferences", typeof(ContentPreferencesTemplate) },
        { "applications", typeof(ConnectedAppsTemplate) },
                { "applications/new", typeof(NewCreateanOAuthapp) },

        { "theme", typeof(ThemeTemplate) }
        };

    // تحديد المكون بناءً على `url`
    if (componentMap.TryGetValue(url, out var componentType))
    {
        builder.OpenComponent(0, componentType);
        builder.CloseComponent();
    }
    else
    {
        // مكون افتراضي إذا لم يتم العثور على `url`
            builder.OpenComponent(0, typeof(BillingSection));
        builder.CloseComponent();
    }
    };

    private class NavItem
    {
        public string Label { get; set; }
        public string url { get; set; }
        public string Badge { get; set; }
    }
}
